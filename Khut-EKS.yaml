AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EKSIAMRoleName:
    Type: String
    Description: The name of the IAM role for the EKS service to assume.
  EKSClusterName:
    Type: String
    Description: The desired name of your AWS EKS Cluster.
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC
      1918) CIDR range.
  PublicSubnet01Block:
    Type: String
    Default: 10.0.0.0/24
    Description: CidrBlock for public subnet 01 within the VPC
  PublicSubnet02Block:
    Type: String
    Default: 10.0.64.0/24
    Description: CidrBlock for public subnet 02 within the VPC
  PrivateSubnet01Block:
    Type: String
    Default: 10.0.128.0/24
    Description: CidrBlock for private subnet 01 within the VPC
  PrivateSubnet02Block:
    Type: String
    Default: 10.0.192.0/24
    Description: CidrBlock for private subnet 02 within the VPC
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Worker Network Configuration
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
Resources:
  EKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
        Principal:
          Service:
            - eks.amazonaws.com
        Action:
          - sts:AssumeRole
      RoleName: EKSIAMRoleName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: InternetGateway
      VpcId: VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ1
        - Key: Network
          Value: Private01
  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ2
        - Key: Network
          Value: Private02
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: InternetGateway
  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: NatGateway01
  PrivateRoute02:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: NatGateway02
  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: NatGatewayEIP1.AllocationId
      SubnetId: PublicSubnet01
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-NatGatewayAZ1
  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: NatGatewayEIP2.AllocationId
      SubnetId: PublicSubnet02
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-NatGatewayAZ2
  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayEIP2:
    DependsOn:
      - VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - !GetAZs ''
        CidrBlock: !Ref PublicSubnet01Block
        VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-PublicSubnet01
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - !GetAZs
            Ref: AWS::Region
        CidrBlock: !Ref PublicSubnet02Block
        VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-PublicSubnet02
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:""
        CidrBlock: !Ref PrivateSubnet01Block
        VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-PrivateSubnet01
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:""
        CidrBlock: !Ref PrivateSubnet02Block
        VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ${AWS::StackName}-PrivateSubnet02
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: PublicSubnet01
      RouteTableId: PublicRouteTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: PublicSubnet02
      RouteTableId: PublicRouteTable
  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: PrivateSubnet01
      RouteTableId: PrivateRouteTable01
  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: PrivateSubnet02
      RouteTableId: PrivateRouteTable02
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: VPC
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: EKSClusterName
      RoleArn:
        Fn::GetAtt:
          - EKSIAMRole
          - Arn
        ResourcesVpcConfig:
          SecurityGroupIds:
            - ControlPlaneSecurityGroup
          SubnetIds:
            - PublicSubnet01
            - PublicSubnet02
            - PrivateSubnet01
            - PrivateSubnet02
    DependsOn:
      - EKSIAMRole
      - PublicSubnet01
      - PublicSubnet02
      - PrivateSubnet01
      - PrivateSubnet02
      - ControlPlaneSecurityGroup
Outputs:
  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join
      - ','
      - - !Ref PublicSubnet01
        - !Ref PublicSubnet02
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
  SecurityGroups:
    Description: Security group for the cluster control plane communication with
      worker nodes
    Value: !Join
      - ','
      - - !Ref ControlPlaneSecurityGroup
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC